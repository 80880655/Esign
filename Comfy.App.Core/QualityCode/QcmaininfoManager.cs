//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。

//     运行库版本:2.0.50727.832
//
//     对此文件的更改可能会导致不正确的行为，并且如果

//     重新生成代码，这些更改将会丢失。

// </auto-generated>
//------------------------------------------------------------------------------

namespace Comfy.App.Core.QualityCode
{
    using Comfy.Data;
    using Comfy.App.Core.QualityCode;
    using System.Data.Common;
    using Comfy.Utils;
    using System.Text;
    using System.Data;
    using System.Web;
    using System;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;



    public class QcmaininfoManager
    {

        public QcmaininfoModelList GetModelList(QcmaininfoModel model)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            SelectSqlSection sql = DataAccess.DefaultDB.Select(table, table.AllColumns());
            if (model.QualityCode != "")
            {
                sql.Where(table.QualityCode == model.QualityCode);
            }
            using (SafeDataReader sdr = new SafeDataReader(sql.ToDataReader()))
            {
                QcmaininfoModelList result = new QcmaininfoModelList();
                while (sdr.Read())
                {
                    QcmaininfoModel m = new QcmaininfoModel();
                    m.QualityCode = sdr.GetString(table.QualityCode);
                    m.CreateDate = sdr.GetDateTime(table.CreateDate);
                    m.Creator = sdr.GetString(table.Creator);
                    m.ApproveDate = sdr.GetDateTime(table.ApproveDate);
                    m.Approver = sdr.GetString(table.Approver);
                    m.Status = sdr.GetString(table.Status);
                    m.Sourcing = sdr.GetString(table.Sourcing);
                    m.MaterialGroup = sdr.GetString(table.MaterialGroup);
                    m.AnalysisNo = sdr.GetString(table.AnalysisNo);
                    m.RefQualityCode = sdr.GetString(table.RefQualityCode);
                    m.Pattern = sdr.GetString(table.Pattern);
                    m.DyeMethod = sdr.GetString(table.DyeMethod);
                    m.BfGmmm = sdr.GetInt32(table.BfGmmm);
                    m.ReplaceBy = sdr.GetString(table.ReplaceBy);
                    m.AfGmmm = sdr.GetInt32(table.AfGmmm);
                    m.Shrinkage = sdr.GetString(table.Shrinkage);
                    m.ShrinkageTestingMethod = sdr.GetString(table.ShrinkageTestingMethod);
                    m.GmtWashing = sdr.GetString(table.GmtWashing);
                    m.Layout = sdr.GetString(table.Layout);
                    m.YarnLength = sdr.GetString(table.YarnLength);
                    m.TappingType = sdr.GetString(table.TappingType);
                    m.Measurement = sdr.GetString(table.Measurement);
                    m.LastUpdateTime = sdr.GetDateTime(table.LastUpdateTime);
                    m.LastUpdateBy = sdr.GetString(table.LastUpdateBy);
                    m.Remark = sdr.GetString(table.Remark);
                    m.SpecialType = sdr.GetString(table.SpecialType);
                    m.ReplaceBy = sdr.GetString(table.ReplaceBy);
                    m.GK_NO = sdr.GetString(table.GK_NO);

                    m.QC_Ref_PPO = sdr.GetString(table.QC_Ref_PPO);
                    m.HF_Ref_PPO = sdr.GetString(table.HF_Ref_PPO);
                    m.QC_Ref_GP = sdr.GetString(table.QC_Ref_GP);
                    m.HF_Ref_GP = sdr.GetString(table.HF_Ref_GP);
                    m.RF_Remark = sdr.GetString(table.RF_Remark);
                    result.Add(m);
                }
                return result;
            }
        }

        public QcmaininfoModelList GetModelListByAttC(QcmaininfoModel model)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            SelectSqlSection sql = DataAccess.DefaultDB.Select(table, table.AllColumns());
            sql.Where(table.Sourcing == model.Sourcing)
                .Where(table.MaterialGroup == model.MaterialGroup);

            sql.Where(table.AfGmmm == model.AfGmmm);


            sql.Where(table.BfGmmm == model.BfGmmm);

            if (!string.IsNullOrEmpty(model.Status))
            {

                sql.Where(table.Status == model.Status);
            }

            if (model.DyeMethod == "")
            {
                sql.Where(table.DyeMethod == null || table.DyeMethod == "" || table.DyeMethod == " ");
            }
            else
            {
                sql.Where(table.DyeMethod == model.DyeMethod);
            }
            if (model.Pattern == "")
            {
                sql.Where(table.Pattern == null || table.Pattern == "" || table.Pattern == " ");
            }
            else
            {
                sql.Where(table.Pattern == model.Pattern);
            }
            if (model.ShrinkageTestingMethod == "")
            {
                sql.Where(table.ShrinkageTestingMethod == null || table.ShrinkageTestingMethod == "" || table.ShrinkageTestingMethod == " ");
            }
            else
            {
                sql.Where(table.ShrinkageTestingMethod == model.ShrinkageTestingMethod);
            }
            if (model.GmtWashing == "")
            {
                sql.Where(table.GmtWashing == null || table.GmtWashing == "" || table.GmtWashing == " ");
            }
            else
            {
                sql.Where(table.GmtWashing == model.GmtWashing);
            }
            if (model.Shrinkage == "")
            {
                sql.Where(table.Shrinkage == null || table.Shrinkage == "" || table.Shrinkage == " ");
            }
            else
            {
                sql.Where(table.Shrinkage == model.Shrinkage);
            }
            using (SafeDataReader sdr = new SafeDataReader(sql.ToDataReader()))
            {
                QcmaininfoModelList result = new QcmaininfoModelList();
                while (sdr.Read())
                {
                    QcmaininfoModel m = new QcmaininfoModel();
                    m.QualityCode = sdr.GetString(table.QualityCode);
                    result.Add(m);
                }
                return result;
            }
        }

        public QcmaininfoModelList GetModelListByAttF(QcmaininfoModel model)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            SelectSqlSection sql = DataAccess.DefaultDB.Select(table, table.AllColumns());
            sql.Where(table.Sourcing == model.Sourcing)
                .Where(table.MaterialGroup == model.MaterialGroup);
            if (!string.IsNullOrEmpty(model.Status))
            {

                sql.Where(table.Status == model.Status);
            }
            if (model.Pattern == "")
            {
                sql.Where(table.Pattern == null || table.Pattern == "" || table.Pattern == " ");
            }
            else
            {
                sql.Where(table.Pattern == model.Pattern);
            }
            if (model.YarnLength == "")
            {
                sql.Where(table.YarnLength == null || table.YarnLength == "" || table.YarnLength == " ");
            }
            else
            {
                sql.Where(table.YarnLength == model.YarnLength);
            }



            using (SafeDataReader sdr = new SafeDataReader(sql.ToDataReader()))
            {
                QcmaininfoModelList result = new QcmaininfoModelList();
                while (sdr.Read())
                {
                    QcmaininfoModel m = new QcmaininfoModel();
                    m.QualityCode = sdr.GetString(table.QualityCode);
                    result.Add(m);
                }
                return result;
            }
        }


        public QcmaininfoModelList GetModelListByAttT(QcmaininfoModel model)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            SelectSqlSection sql = DataAccess.DefaultDB.Select(table, table.AllColumns());
            sql.Where(table.Sourcing == model.Sourcing)
                .Where(table.MaterialGroup == model.MaterialGroup);
            if (!string.IsNullOrEmpty(model.Status))
            {

                sql.Where(table.Status == model.Status);
            }
            if (model.YarnLength == "")
            {
                sql.Where(table.YarnLength == null || table.YarnLength == "" || table.YarnLength == " ");
            }
            else
            {
                sql.Where(table.YarnLength == model.YarnLength);
            }
            if (model.Measurement == "")
            {
                sql.Where(table.Measurement == null || table.Measurement == "" || table.Measurement == " ");
            }
            else
            {
                sql.Where(table.Measurement == model.Measurement);
            }
            if (model.TappingType == "")
            {
                sql.Where(table.TappingType == null || table.TappingType == "" || table.TappingType == " ");
            }
            else
            {
                sql.Where(table.TappingType == model.TappingType);
            }


            using (SafeDataReader sdr = new SafeDataReader(sql.ToDataReader()))
            {
                QcmaininfoModelList result = new QcmaininfoModelList();
                while (sdr.Read())
                {
                    QcmaininfoModel m = new QcmaininfoModel();
                    m.QualityCode = sdr.GetString(table.QualityCode);
                    result.Add(m);
                }
                return result;
            }
        }

        public QcmaininfoModelList GetModelListTwo(QcmaininfoModelGen model)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            QcfinishdtlTable finishTable = new QcfinishdtlTable();
            QcconstructiondtlTable constructionTable = new QcconstructiondtlTable();
            QccustomerlibraryTable customerTable = new QccustomerlibraryTable();
            int flag = 0;
            SelectSqlSection sql = DataAccess.DefaultDB.Select(table, table.AllColumns().Distinct);

            sql.Join(finishTable, finishTable.QualityCode == table.QualityCode).Join(constructionTable,
                constructionTable.QualityCode == table.QualityCode).Join(customerTable, customerTable.QualityCode
                == table.QualityCode);
            if (model.Pattern != "" && model.Pattern != null)
            {
                sql.Where(table.Pattern == model.Pattern);
                flag++;
            }
            if (model.Status != "" && model.Status != null)
            {
                sql.Where(table.Status == model.Status);
                flag++;
            }
            if (model.Sourcing != "" && model.Sourcing != null)
            {
                sql.Where(table.Sourcing == model.Sourcing);
                flag++;
            }
            if (model.MaterialGroup != "" && model.MaterialGroup != null)
            {
                sql.Where(table.MaterialGroup == model.MaterialGroup);
                flag++;
            }

            if (model.QualityCode != "" && model.QualityCode != null)
            {
                sql.Where(table.QualityCode == model.QualityCode);
                flag++;
            }
            if (model.DyeMethod != "" && model.DyeMethod != null)
            {
                sql.Where(table.DyeMethod == model.DyeMethod);
                flag++;
            }
            if (model.Sales != "" && model.Sales != null)
            {
                sql.Where(customerTable.Sales == model.Sales);
                flag++;
            }

            if (model.SalesTeam != "" && model.SalesTeam != null)
            {
                sql.Where(customerTable.SalesGroup == model.SalesTeam);
                flag++;
            }

            if (model.Construction != "" && model.Construction != null)
            {
                sql.Where(constructionTable.Construction == model.Construction);
                flag++;
            }

            if (model.Finishing != "" && model.Finishing != null)
            {
                sql.Where(finishTable.FinishingCode == model.Finishing);
                flag++;
            }

            QcmaininfoModelList result = new QcmaininfoModelList();
            if (flag == 0)
                return result;
            int count = TableMapModel.SetRangeSql(ref sql, table, table.QualityCode, model.StartPage, model.PageSize, model.OrderByField);

            QcconstructiondtlManager qcm = new QcconstructiondtlManager();
            QcfinishdtlManager qsm = new QcfinishdtlManager();
            QcconstructiondtlModelList qcml = new QcconstructiondtlModelList();
            QcfinishdtlModelList qsml = new QcfinishdtlModelList();
            using (SafeDataReader sdr = new SafeDataReader(sql.ToDataReader()))
            {

                while (sdr.Read())
                {
                    QcmaininfoModel m = new QcmaininfoModel();
                    m.GridRowCount = count;
                    m.QualityCode = sdr.GetString(table.QualityCode);


                    qcml = qcm.GetModelList(new QcconstructiondtlModel() { QualityCode = m.QualityCode });
                    for (int i = 0; i < qcml.Count; i++)
                    {
                        m.Construction = m.Construction + qcml[i].Construction + ";";
                    }

                    qsml = qsm.GetModelList(new QcfinishdtlModel() { QualityCode = m.QualityCode });
                    for (int i = 0; i < qsml.Count; i++)
                    {
                        m.Finishing = m.Finishing + qsml[i].FinishingCode + ";";
                    }

                    m.CreateDate = sdr.GetDateTime(table.CreateDate);
                    m.Creator = sdr.GetString(table.Creator);
                    m.ApproveDate = sdr.GetDateTime(table.ApproveDate);
                    m.Approver = sdr.GetString(table.Approver);
                    m.Status = sdr.GetString(table.Status);
                    m.Sourcing = sdr.GetString(table.Sourcing);
                    m.MaterialGroup = sdr.GetString(table.MaterialGroup);
                    m.AnalysisNo = sdr.GetString(table.AnalysisNo);
                    m.RefQualityCode = sdr.GetString(table.RefQualityCode);
                    m.Pattern = sdr.GetString(table.Pattern);
                    m.DyeMethod = sdr.GetString(table.DyeMethod);
                    m.BfGmmm = sdr.GetInt32(table.BfGmmm);
                    m.AfGmmm = sdr.GetInt32(table.AfGmmm);
                    m.Shrinkage = sdr.GetString(table.Shrinkage);
                    m.ReplaceBy = sdr.GetString(table.ReplaceBy);
                    m.ShrinkageTestingMethod = sdr.GetString(table.ShrinkageTestingMethod);
                    m.GmtWashing = sdr.GetString(table.GmtWashing);
                    m.Layout = sdr.GetString(table.Layout);
                    m.YarnLength = sdr.GetString(table.YarnLength);
                    m.TappingType = sdr.GetString(table.TappingType);
                    m.SpecialType = sdr.GetString(table.SpecialType);
                    m.Measurement = sdr.GetString(table.Measurement);
                    m.LastUpdateTime = sdr.GetDateTime(table.LastUpdateTime);
                    m.LastUpdateBy = sdr.GetString(table.LastUpdateBy);
                    m.Remark = sdr.GetString(table.Remark);
                    result.Add(m);
                }
                return result;
            }
        }


        public QcmaininfoModelList GetModelListOne(QcmaininfoModelGen model)
        {

            string Sql1 = "SELECT * " +
             " FROM (SELECT ROWNUM as Items, E.* " +
              "  FROM (SELECT DISTINCT A.* " +
                "  FROM QCMainInfo A " +
                      " LEFT JOIN QCConstructionDtl B " +
                        "  ON A.Quality_Code = B.Quality_Code " +
                     "  LEFT JOIN QCFinishDtl C " +
                        "  ON A.Quality_COde = C.Quality_Code " +
                      " LEFT JOIN QCCustomerLibrary D " +
                        "  ON D.Quality_Code = A.Quality_Code " +
                      " LEFT JOIN QCCustomerLibrary F " +
                      "    ON F.Quality_Code=A.Quality_Code " +
                        "  where @Condition order by A.Quality_Code asc ) E) " +
             "  WHERE @PageSize";

            //"select CUSTOMER_CD||'<|>'||NAME as CU from gen_customer where (CUSTOMER_CD like (UPPER(@Name)||'%') or NAME like (UPPER(@Name)||'%') ) and rownum<51 order by NAME asc"

            string Sql2 = " SELECT count( DISTINCT A.Quality_Code) " +
                "  FROM QCMainInfo A " +
                     "  LEFT JOIN QCConstructionDtl B " +
                       "   ON A.Quality_Code = B.Quality_Code " +
                     "  LEFT JOIN QCFinishDtl C " +
                         " ON A.Quality_COde = C.Quality_Code " +
                     "  LEFT JOIN QCCustomerLibrary D " +
                        "  ON D.Quality_Code = A.Quality_Code " +
                      " LEFT JOIN QCCustomerLibrary F " +
                      "    ON F.Quality_Code=A.Quality_Code where @Condition order by A.Quality_Code asc";

            int flag = 0;
            // SelectSqlSection sql = DataAccess.DefaultDB.Select(table, table.AllColumns().Distinct);


            // 添加查询条件 
            StringBuilder sb = new StringBuilder("");
            if (model.Pattern != "" && model.Pattern != null)
            {
                sb.Append("UPPER(A.Pattern)=@Pattern");
                flag++;
            }
            if (model.CreateDate != null && model.CreateDate != DateTime.MinValue)
            {
                if (flag == 0)
                    sb.Append("A.Create_Date>=@CreateTime");
                else
                    sb.Append(" and A.Create_Date>=@CreateTime");
                flag++;

            }

            //Add by sunny 20171018 时间查询

            if (model.CreateEndDate != null && model.CreateEndDate != DateTime.MinValue)
            {
                if (flag == 0)
                    sb.Append("A.Create_Date<=@CreateEndTime");
                else
                    sb.Append(" and A.Create_Date<=@CreateEndTime");
                flag++;

            }


            if (model.Creator != "" && model.Creator != null)
            {
                if (flag == 0)
                    sb.Append("upper(A.Creator)=@Creator");
                else
                    sb.Append("  and upper(A.Creator)=@Creator");
                flag++;
            }
            if (model.BfGmmm != null && model.BfGmmm != 0)
            {
                if (flag == 0) sb.Append("A.BF_GMMM=@BfGmmm");
                else
                    sb.Append(" and A.BF_GMMM=@BfGmmm");
                flag++;
            }
            if (model.AfGmmm != null && model.AfGmmm != 0)
            {
                if (flag == 0)
                    sb.Append("A.AF_GMMM=@AfGmmm");
                else
                    sb.Append(" and A.AF_GMMM=@AfGmmm");
                flag++;
            }
            if (model.Status != "" && model.Status != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(A.Status)=@Status");
                else
                    sb.Append(" and UPPER(A.Status)=@Status");
                flag++;
            }
            if (model.CustomerQaulityId != "" && model.CustomerQaulityId != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(F.Customer_Quality_ID)=@CustomerQualityId");
                else
                    sb.Append(" and UPPER(F.Customer_Quality_ID)=@CustomerQualityId");
                flag++;
            }
            if (model.Sourcing != "" && model.Sourcing != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(A.Sourcing)=@Sourcing");
                else
                    sb.Append(" and UPPER(A.Sourcing)=@Sourcing");
                flag++;
            }
            if (model.MaterialGroup != "" && model.MaterialGroup != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(A.Material_Group)=@MaterialGroup");
                else
                    sb.Append(" and UPPER(A.Material_Group)=@MaterialGroup");
                flag++;
            }

            if (model.QualityCode != "" && model.QualityCode != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(A.Quality_Code)=@QualityCode");
                else
                    sb.Append(" and UPPER(A.Quality_Code)=@QualityCode");
                flag++;
            }
            if (model.DyeMethod != "" && model.DyeMethod != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(A.Dye_Method)=@DyeMethod");
                else
                    sb.Append(" and UPPER(A.Dye_Method)=@DyeMethod");
                flag++;
            }
            if (model.Sales != "" && model.Sales != null)
            {
                if (flag == 0)
                    sb.Append("upper(D.Sales)=@Salesed");
                else
                    sb.Append(" and upper(D.Sales)=@Salesed");
                flag++;
            }

            if (model.SalesTeam != "" && model.SalesTeam != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(D.Sales_Group)=@SalesTeam");
                else
                    sb.Append(" and UPPER(D.Sales_Group)=@SalesTeam");
                flag++;
            }

            if (model.Construction != "" && model.Construction != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(B.Construction)=@Construction");
                else
                    sb.Append(" and UPPER(B.Construction)=@Construction");
                flag++;
            }

            if (model.Finishing != "" && model.Finishing != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(C.Finishing_Code)=@Finishing");
                else
                    sb.Append(" and UPPER(C.Finishing_Code)=@Finishing");
                flag++;
            }
            // 添加对customer条件的判断 by LYH 2014/2/25
            if (model.CustomerCode != "" && model.CustomerCode != null)
            {
                if (flag == 0)
                    sb.Append("UPPER(D.BUYER_ID) = @CustomerCode");
                else
                    sb.Append(" and UPPER(D.BUYER_ID) = @CustomerCode");
                flag++;
            }

            QcmaininfoModelList result = new QcmaininfoModelList();
            if (flag == 0)
                return result;
            Sql1 = Sql1.Replace("@Condition", sb.ToString());
            Sql1 = Sql1.Replace("@PageSize", "Items>" + ((model.StartPage - 1) * model.PageSize) + " and Items<=" + (model.StartPage * model.PageSize));
            Sql2 = Sql2.Replace("@Condition", sb.ToString());

            CustomSqlSection csql1 = DataAccess.DefaultDB.CustomSql(Sql1);

            CustomSqlSection csql2 = DataAccess.DefaultDB.CustomSql(Sql2);

            // 对查询参数赋值

            string tempSql = sb.ToString();
            if (tempSql.Contains("@AfGmmm"))
            {
                csql1.AddInputParameter("AfGmmm", DbType.Int32, model.AfGmmm);
                csql2.AddInputParameter("AfGmmm", DbType.Int32, model.AfGmmm);
            }
            if (tempSql.Contains("@CreateTime"))
            {
                csql1.AddInputParameter("CreateTime", DbType.DateTime, model.CreateDate);
                csql2.AddInputParameter("CreateTime", DbType.DateTime, model.CreateDate);
            }


            //Add by sunny 时间范围结束

            if (tempSql.Contains("@CreateEndTime"))
            {
                csql1.AddInputParameter("CreateEndTime", DbType.DateTime, model.CreateEndDate);
                csql2.AddInputParameter("CreateEndTime", DbType.DateTime, model.CreateEndDate);
            }


            if (tempSql.Contains("@BfGmmm"))
            {
                csql1.AddInputParameter("BfGmmm", DbType.Int32, model.BfGmmm);
                csql2.AddInputParameter("BfGmmm", DbType.Int32, model.BfGmmm);
            }
            if (tempSql.Contains("@Pattern"))
            {
                csql1.AddInputParameter("Pattern", DbType.String, model.Pattern.ToUpper());
                csql2.AddInputParameter("Pattern", DbType.String, model.Pattern.ToUpper());
            }
            if (tempSql.Contains("@Status"))
            {
                csql1.AddInputParameter("Status", DbType.String, model.Status.ToUpper());
                csql2.AddInputParameter("Status", DbType.String, model.Status.ToUpper());
            }
            if (tempSql.Contains("@Sourcing"))
            {
                csql1.AddInputParameter("Sourcing", DbType.String, model.Sourcing.ToUpper());
                csql2.AddInputParameter("Sourcing", DbType.String, model.Sourcing.ToUpper());
            }
            if (tempSql.Contains("@CustomerQualityId"))
            {
                csql1.AddInputParameter("CustomerQualityId", DbType.String, model.CustomerQaulityId.ToUpper());
                csql2.AddInputParameter("CustomerQualityId", DbType.String, model.CustomerQaulityId.ToUpper());
            }
            if (tempSql.Contains("@MaterialGroup"))
            {
                csql1.AddInputParameter("MaterialGroup", DbType.String, model.MaterialGroup.ToUpper());
                csql2.AddInputParameter("MaterialGroup", DbType.String, model.MaterialGroup.ToUpper());
            }
            if (tempSql.Contains("@QualityCode"))
            {
                csql1.AddInputParameter("QualityCode", DbType.String, model.QualityCode.ToUpper());
                csql2.AddInputParameter("QualityCode", DbType.String, model.QualityCode.ToUpper());
            }
            if (tempSql.Contains("@Creator"))
            {
                csql1.AddInputParameter("Creator", DbType.String, model.Creator.ToUpper());
                csql2.AddInputParameter("Creator", DbType.String, model.Creator.ToUpper());
            }
            if (tempSql.Contains("@DyeMethod"))
            {
                csql1.AddInputParameter("DyeMethod", DbType.String, model.DyeMethod.ToUpper());
                csql2.AddInputParameter("DyeMethod", DbType.String, model.DyeMethod.ToUpper());
            }
            if (tempSql.Contains("@Salesed"))
            {
                csql1.AddInputParameter("Salesed", DbType.String, model.Sales.ToUpper());
                csql2.AddInputParameter("Salesed", DbType.String, model.Sales.ToUpper());
            }
            if (tempSql.Contains("@SalesTeam"))
            {
                csql1.AddInputParameter("SalesTeam", DbType.String, model.SalesTeam.ToUpper());
                csql2.AddInputParameter("SalesTeam", DbType.String, model.SalesTeam.ToUpper());
            }
            if (tempSql.Contains("@Construction"))
            {
                csql1.AddInputParameter("Construction", DbType.String, model.Construction.ToUpper());
                csql2.AddInputParameter("Construction", DbType.String, model.Construction.ToUpper());
            }
            if (tempSql.Contains("@Finishing"))
            {
                csql1.AddInputParameter("Finishing", DbType.String, model.Finishing.ToUpper());
                csql2.AddInputParameter("Finishing", DbType.String, model.Finishing.ToUpper());
            }
            // 添加对customer条件的判断 by LYH 2014/2/25
            if (tempSql.Contains("@CustomerCode"))
            {
                csql1.AddInputParameter("CustomerCode", DbType.String, model.CustomerCode.ToUpper());
                csql2.AddInputParameter("CustomerCode", DbType.String, model.CustomerCode.ToUpper());
            }

            //  int count = TableMapModel.SetRangeSql(ref sql, table, table.QualityCode, model.StartPage, model.PageSize, model.OrderByField);
            int count = csql2.ToScalar<int>();
            QcmaininfoTable table = new QcmaininfoTable();



            PbknityarntypeManager yarnManager = new PbknityarntypeManager();//kingzhang for support 709786 对于YarnInfo字符串中的Yarn_Type信息替换为pbKnitYarnType.description
            QcconstructiondtlManager qcm = new QcconstructiondtlManager();
            QcfinishdtlManager qsm = new QcfinishdtlManager();
            QccustomerlibraryManager qlm = new QccustomerlibraryManager();
            QcconstructiondtlModelList qcml = new QcconstructiondtlModelList();
            QcfinishdtlModelList qsml = new QcfinishdtlModelList();
            QccustomerlibraryModelList qclm = new QccustomerlibraryModelList();
            QcavailablewidthModelList qsaw = new QcavailablewidthModelList();
            QcavailablewidthManager qcam = new QcavailablewidthManager();
            QcyarndtlManager qym = new QcyarndtlManager();
            QcyarndtlModelList qyml = new QcyarndtlModelList();
            DataSet ds;
            CustomSqlSection css;
            DataTable dt;
            using (SafeDataReader sdr = new SafeDataReader(csql1.ToDataReader()))
            {

                while (sdr.Read())
                {
                    QcmaininfoModel m = new QcmaininfoModel();
                    m.GridRowCount = count;
                    m.QualityCode = sdr.GetString(table.QualityCode);

                    qcml = qcm.GetModelListOne(new QcconstructiondtlModel() { QualityCode = m.QualityCode });
                    for (int i = 0; i < qcml.Count; i++)
                    {

                        m.Construction = m.Construction + qcml[i].Construction + ";";
                    }

                    qsml = qsm.GetModelListOne(new QcfinishdtlModel() { QualityCode = m.QualityCode });
                    for (int i = 0; i < qsml.Count; i++)
                    {
                        m.Finishing = m.Finishing + qsml[i].FinishingCode + ";";
                    }

                    qclm = qlm.GetModelList(new QccustomerlibraryModel() { QualityCode = m.QualityCode });
                    for (int i = 0; i < qclm.Count; i++)
                    {
                        m.CustomerQualityId = m.CustomerQualityId + qclm[i].CustomerQualityId + ";";
                        m.BuyserIds = m.BuyserIds + qclm[i].BuyerId + ";";
                        m.Brank = m.Brank + qclm[i].Brand + ";";
                        m.MillComments = m.MillComments + qclm[i].MillComments + ";";
                    }
                    qsaw = qcam.GetModelList(new QcavailablewidthModel() { QualityCode = m.QualityCode });
                    for (int i = 0; i < qsaw.Count; i++)
                    {
                        if (i != qsaw.Count - 1)
                            m.AvaWidth = m.AvaWidth + string.Format("{0}G{1}Inch/{2}N/{3}-{4}\"", qsaw[i].Gauge, qsaw[i].Diameter, qsaw[i].TotalNeedles, qsaw[i].Width, qsaw[i].MaxWidth) + "--";
                        else
                            m.AvaWidth = m.AvaWidth + string.Format("{0}G{1}Inch/{2}N/{3}-{4}\"", qsaw[i].Gauge, qsaw[i].Diameter, qsaw[i].TotalNeedles, qsaw[i].Width, qsaw[i].MaxWidth);
                    }
                    qyml = qym.GetModelList(new QcyarndtlModel() { QualityCode = m.QualityCode });                 
                    for (int i = 0; i < qyml.Count; i++)
                    {
                        PbknityarntypeModelList yarnModel = yarnManager.GetModelList(new PbknityarntypeModel() { YarnType = qyml[i].YarnType });//kingzhang for support 709786 对于YarnInfo字符串中的Yarn_Type信息替换为pbKnitYarnType.description
                        if (i != qyml.Count - 1)
                            m.YarnInfo = m.YarnInfo + string.Format("{0}X{1} {2} {3}% {4}", qyml[i].YarnCount, qyml[i].Threads,yarnModel.Count > 0 ? yarnModel[0].Description:qyml[i].YarnType, qyml[i].YarnRatio, qyml[i].YarnComponent) + "--";
                        else
                            m.YarnInfo = m.YarnInfo + string.Format("{0}X{1} {2} {3}% {4}", qyml[i].YarnCount, qyml[i].Threads,yarnModel.Count > 0 ? yarnModel[0].Description : qyml[i].YarnType, qyml[i].YarnRatio, qyml[i].YarnComponent);
                    }

                    //by mengjw 2015-08-04
                    //原来
                    //css= DataAccess.DefaultDB.CustomSql("SELECT distinct pi.ppo_no as PPO,pi.FABRIC_TYPE_CD  "+
                    //  "FROM ppo_hd ph,gen_customer c,ppo_qcmaininfo qc, ppo_item pi, fab_combo fc, ppo_qccomment qcc,ppo_item_combo pic,QCMainInfo qm  "+
                    //  " WHERE ph.ppo_no=pi.ppo_no and  fc.fab_combo_id = qcc.fab_combo_id and qc.ppo_item_id=pi.ppo_item_id and pi.ppo_item_id=pic.ppo_item_id and pi.quality_code=qm.quality_code and "+
                    //  " pic.fab_combo_id=fc.fab_combo_id and qc.ppo_qc_id=qcc.ppo_qc_id and ph.customer_cd=c.customer_cd and qm.Status='Approved' and QCC.STATUS='Approved' and qm.quality_code=@QC ");
                    //改为

                    //
                    //css = DataAccess.DefaultDB.CustomSql("SELECT distinct pi.ppo_no as PPO,pi.FABRIC_TYPE_CD  " +
                    //"FROM ppo_hd ph,gen_customer c,ppo_qcmaininfo qc, ppo_item pi, fab_combo fc, ppo_qccomment qcc,ppo_item_combo pic,QCMainInfo qm  " +
                    //" WHERE ph.ppo_no=pi.ppo_no and  fc.fab_combo_id = qcc.fab_combo_id and qc.ppo_item_id=pi.ppo_item_id and pi.ppo_item_id=pic.ppo_item_id and pi.quality_code=qm.quality_code and " +
                    //" pic.fab_combo_id=fc.fab_combo_id and qc.ppo_qc_id=qcc.ppo_qc_id and ph.customer_cd=c.customer_cd  and QCC.STATUS='Approved' and qm.quality_code=@QC and  rownum<=1");
                    css = DataAccess.DefaultDB.CustomSql(@"
                           select  ppo_no as PPO , FABRIC_TYPE_CD   from 
     (select  ROW_NUMBER() OVER(PARTITION BY quality_code ORDER BY  approve_date desc) rn,
     quality_code,ppo_no, FABRIC_TYPE_CD from (SELECT distinct qm.quality_code, pi.ppo_no ,pi.FABRIC_TYPE_CD  ,QCC.approve_date
     FROM ppo_hd ph,gen_customer c,ppo_qcmaininfo qc, ppo_item pi, fab_combo fc, ppo_qccomment qcc,ppo_item_combo pic,QCMainInfo qm  
     WHERE ph.ppo_no=pi.ppo_no and  fc.fab_combo_id = qcc.fab_combo_id and qc.ppo_item_id=pi.ppo_item_id  
     and pi.ppo_item_id=pic.ppo_item_id and pi.quality_code=qm.quality_code and  pic.fab_combo_id=fc.fab_combo_id   
     and qc.ppo_qc_id=qcc.ppo_qc_id and ph.customer_cd=c.customer_cd  and QCC.STATUS='Approved' )s ) where rn=1 and quality_code=@QC

                            ");


                    css.AddInputParameter("QC", DbType.String, m.QualityCode);
                    ds = css.ToDataSet();

                    dt = ds.Tables[0];
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        //modify:gaofeng 2021 / 01 / 18 < 2021 - 0001 QC System Enhancement from sales > --begin

                        //m.ApprovedFromSPPO = m.ApprovedFromSPPO + dt.Rows[i]["PPO"].ToString() + "(" + dt.Rows[i]["FABRIC_TYPE_CD"].ToString() + ");";

                        m.ApprovedFromSPPO = m.ApprovedFromSPPO + dt.Rows[i]["PPO"].ToString();

                        m.ApprovedFromSPPO_Usage = m.ApprovedFromSPPO_Usage + dt.Rows[i]["FABRIC_TYPE_CD"].ToString();

                        //modify:gaofeng 2021 / 01 / 18 < 2021 - 0001 QC System Enhancement from sales > --end

                    }

                    m.CreateDate = sdr.GetDateTime(table.CreateDate);
                    m.Creator = sdr.GetString(table.Creator);
                    m.ApproveDate = sdr.GetDateTime(table.ApproveDate);
                    m.Approver = sdr.GetString(table.Approver);
                    m.Status = sdr.GetString(table.Status);
                    if (m.Status == "NEW")
                        m.Status = "New";
                    m.Sourcing = sdr.GetString(table.Sourcing);
                    m.MaterialGroup = sdr.GetString(table.MaterialGroup);
                    m.AnalysisNo = sdr.GetString(table.AnalysisNo);
                    m.RefQualityCode = sdr.GetString(table.RefQualityCode);
                    m.Pattern = sdr.GetString(table.Pattern);
                    m.DyeMethod = sdr.GetString(table.DyeMethod);
                    m.ReplaceBy = sdr.GetString(table.ReplaceBy);
                    m.Repeat = sdr.GetString(table.REPEAT);
                    m.BfGmmm = sdr.GetInt32(table.BfGmmm);
                    m.AfGmmm = sdr.GetInt32(table.AfGmmm);
                    m.Shrinkage = sdr.GetString(table.Shrinkage);
                    m.ShrinkageTestingMethod = sdr.GetString(table.ShrinkageTestingMethod);
                    m.GmtWashing = sdr.GetString(table.GmtWashing);
                    m.Layout = sdr.GetString(table.Layout);
                    m.YarnLength = sdr.GetString(table.YarnLength);
                    m.TappingType = sdr.GetString(table.TappingType);
                    m.Measurement = sdr.GetString(table.Measurement);
                    m.Remark = sdr.GetString(table.Remark);
                    m.SpecialType = sdr.GetString(table.SpecialType);
                    m.LastUpdateTime = sdr.GetDateTime(table.LastUpdateTime);
                    m.LastUpdateBy = sdr.GetString(table.LastUpdateBy);

                    m.GK_NO = sdr.GetString(table.GK_NO);
                    m.QC_Ref_PPO = sdr.GetString(table.QC_Ref_PPO);
                    m.HF_Ref_PPO = sdr.GetString(table.HF_Ref_PPO);
                    m.QC_Ref_GP = sdr.GetString(table.QC_Ref_GP);
                    m.HF_Ref_GP = sdr.GetString(table.HF_Ref_GP);
                    m.CustomerComment = GetCustomerComment(m.QualityCode);
                    result.Add(m);
                }

                return result;
            }
        }


        //Add by sunny 2017 0904  summar ma 要去search页面添加销售的评价
        /// <param name="strQC"></param>
        /// <returns>通过QC获得销售评价</returns>
        public string GetCustomerComment(string QC)
        {

            string sd = "";
            if (QC != "")
            {
                CustomSqlSection css = DataAccess.DefaultDB.CustomSql(@"SELECT  qcc.customer_comment
FROM ppo_hd ph,gen_customer c,ppo_qcmaininfo qc, ppo_item pi, fab_combo fc, ppo_qccomment qcc,ppo_item_combo pic,QCMainInfo qm
WHERE ph.ppo_no=pi.ppo_no and  fc.fab_combo_id = qcc.fab_combo_id and qc.ppo_item_id=pi.ppo_item_id and pi.ppo_item_id=pic.ppo_item_id and pi.quality_code=qm.quality_code and qm.Material_Group<>'Flat Knit Fabric' 
AND pic.fab_combo_id=fc.fab_combo_id and qc.ppo_qc_id=qcc.ppo_qc_id and ph.customer_cd=c.customer_cd
and pi.quality_code= @Qc order by qcc.customer_comment");
                css.AddInputParameter("Qc", DbType.String, QC);

                DataTable dt = css.ToDataSet().Tables[0];
                string i = "";

                if (dt.Rows.Count > 0)
                {
                    i = css.ToDataSet().Tables[0].Rows[0][0].ToString();
                }

                if (i != "")
                {
                    sd = i;
                }
            }
            return (sd);
        }

        /// <summary>
        /// kingzhang for support  734277  SPPO判断规则：KSF开头的是样板SPPO
        /// </summary>
        /// <param name="QC"></param>
        /// <returns></returns>
        public string GetApproveStaus(string QC)
        {

            string sd = "0";
            if (QC != "")
            {
                string sql = string.Format(@"select 1 from PlanningDB..ppo where Quality_Code=@Qc and PPO_No like 'KSF%'");
                CustomSqlSection cssKmis = DataAccess.CreateSqlServerDatabase().CustomSql(sql);
                cssKmis.AddInputParameter("Qc", DbType.String, QC);
                DataTable dtKmis = cssKmis.ToDataSet().Tables[0];
                //dtKmis有值说明是SPPO下单的，匹配不到数据则直接返回1 
                if (dtKmis.Rows.Count <= 0)
                {
                    sd = "1";
                    return (sd);
                }

                CustomSqlSection css = DataAccess.DefaultDB.CustomSql(@"SELECT NVL(QCC.STATUS,'') STATUS FROM
                            ppo_hd ph,gen_customer c,ppo_qcmaininfo qc,ppo_item pi,fab_combo fc,ppo_qccomment qcc,ppo_item_combo pic,QCMainInfo qm
                            WHERE	ph.ppo_no = pi.ppo_no	AND fc.fab_combo_id = qcc.fab_combo_id	AND qc.ppo_item_id = pi.ppo_item_id	AND pi.ppo_item_id = pic.ppo_item_id
                            AND pi.quality_code = qm.quality_code	AND pic.fab_combo_id = fc.fab_combo_id	AND qc.ppo_qc_id = qcc.ppo_qc_id AND ph.customer_cd = c.customer_cd
                            and qm.quality_code =@Qc
                            order by QCC.STATUS");
                css.AddInputParameter("Qc", DbType.String, QC);

                DataTable dt = css.ToDataSet().Tables[0];
                string i = "";
                //需要判断是否有approve的值（有approve值返回1 无返回0  1 QC可使用approve按钮，0 QC不可使用approve按钮）
                //dt无值说明sales未审批，有值判断是否有approve值
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        string value = dr["STATUS"].ToString();
                        if (value=="Approved")
                            sd = "1"; 
                    }
                } 
            }
            return (sd);
        }

        public void AddModel(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            InsertSqlSection insertSql = DataAccess.DefaultDB.Insert(table);
            if (tran != null)
            {
                insertSql.SetTransaction(tran);
            }
            insertSql.AddColumn(table.QualityCode, model.QualityCode)
                .AddColumn(table.CreateDate, model.CreateDate)
                .AddColumn(table.Creator, model.Creator)
                .AddColumn(table.ApproveDate, model.ApproveDate)
                .AddColumn(table.Approver, model.Approver)
                .AddColumn(table.Status, model.Status)
                .AddColumn(table.Sourcing, model.Sourcing)
                .AddColumn(table.MaterialGroup, model.MaterialGroup)
                .AddColumn(table.AnalysisNo, model.AnalysisNo)
                .AddColumn(table.RefQualityCode, model.RefQualityCode)
                .AddColumn(table.Pattern, model.Pattern)
                .AddColumn(table.DyeMethod, model.DyeMethod)
                .AddColumn(table.BfGmmm, model.BfGmmm)
                .AddColumn(table.AfGmmm, model.AfGmmm)
                .AddColumn(table.Shrinkage, model.Shrinkage)
                .AddColumn(table.ShrinkageTestingMethod, model.ShrinkageTestingMethod)
                .AddColumn(table.GmtWashing, model.GmtWashing)
                .AddColumn(table.Layout, model.Layout)
                .AddColumn(table.YarnLength, model.YarnLength)
                .AddColumn(table.TappingType, model.TappingType)
                .AddColumn(table.Measurement, model.Measurement)
                .AddColumn(table.LastUpdateTime, model.LastUpdateTime)
                .AddColumn(table.Remark, model.Remark)
                .AddColumn(table.SpecialType, model.SpecialType)
                .AddColumn(table.LastUpdateBy, model.LastUpdateBy)
                .AddColumn(table.GK_NO, model.GK_NO)
                .AddColumn(table.REPEAT, model.Repeat)
                .Execute();
        }
        public void AddModels(QcmaininfoModelList models, DbTransaction tran)
        {
            for (int i = 0; i < models.Count; i++)
            {
                this.AddModel(models[i], tran);
            }
        }
        public void UpdateModel(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            UpdateSqlSection sql = DataAccess.DefaultDB.Update(table);
            if (tran != null)
            {
                sql.SetTransaction(tran);
            }
            sql.AddColumn(table.Pattern, model.Pattern)
            .AddColumn(table.DyeMethod, model.DyeMethod)
            .AddColumn(table.BfGmmm, model.BfGmmm)
            .AddColumn(table.AfGmmm, model.AfGmmm)
            .AddColumn(table.Shrinkage, model.Shrinkage)
            .AddColumn(table.ShrinkageTestingMethod, model.ShrinkageTestingMethod)
            .AddColumn(table.GmtWashing, model.GmtWashing)
            .AddColumn(table.Layout, model.Layout)
            .AddColumn(table.Remark, model.Remark)
            .AddColumn(table.Riskrade, model.Riskrade)
            .AddColumn(table.LastUpdateTime, model.LastUpdateTime)
            .AddColumn(table.GK_NO, model.GK_NO)
            .AddColumn(table.QC_Ref_PPO, model.QC_Ref_PPO)
            .AddColumn(table.HF_Ref_PPO, model.HF_Ref_PPO)
            .AddColumn(table.QC_Ref_GP, model.QC_Ref_GP)
            .AddColumn(table.HF_Ref_GP, model.HF_Ref_GP)
            .AddColumn(table.RF_Remark, model.RF_Remark)
            .AddColumn(table.REPEAT, model.Repeat)
            .AddColumn(table.LastUpdateBy, model.LastUpdateBy).Where(table.QualityCode == model.QualityCode)
            .Execute();
        }

        public void UpdateModelRemark(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            UpdateSqlSection sql = DataAccess.DefaultDB.Update(table);
            if (tran != null)
            {
                sql.SetTransaction(tran);
            }
            sql.AddColumn(table.Remark, model.Remark)
            .AddColumn(table.QC_Ref_PPO, model.QC_Ref_PPO)
            .AddColumn(table.HF_Ref_PPO, model.HF_Ref_PPO)
            .AddColumn(table.QC_Ref_GP, model.QC_Ref_GP)
            .AddColumn(table.HF_Ref_GP, model.HF_Ref_GP)
             .AddColumn(table.RF_Remark, model.RF_Remark)
            .Where(table.QualityCode == model.QualityCode)
            .Execute();
        }


        /*    public bool CheckParam(string s)
            {
                if (s.ToUpper().Contains("DELETE") || s.ToUpper().Contains("INSERT") ||
                    s.ToUpper().Contains("SELECT")||s.ToUpper)
                {
                    return false;
                }
                if()
                return true;
            }*/

        public void UpdateModelFlat(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            UpdateSqlSection sql = DataAccess.DefaultDB.Update(table);
            if (tran != null)
            {
                sql.SetTransaction(tran);
            }
            sql.AddColumn(table.Pattern, model.Pattern)
            .AddColumn(table.YarnLength, model.YarnLength)
            .AddColumn(table.SpecialType, model.SpecialType)
            .AddColumn(table.LastUpdateTime, model.LastUpdateTime)
            .AddColumn(table.Layout, model.Layout)
            .AddColumn(table.QC_Ref_PPO, model.QC_Ref_PPO)
            .AddColumn(table.HF_Ref_PPO, model.HF_Ref_PPO)
            .AddColumn(table.QC_Ref_GP, model.QC_Ref_GP)
            .AddColumn(table.HF_Ref_GP, model.HF_Ref_GP)
            .AddColumn(table.RF_Remark, model.RF_Remark)
             .AddColumn(table.Remark, model.YarnLength)
            .AddColumn(table.LastUpdateBy, model.LastUpdateBy).Where(table.QualityCode == model.QualityCode)
            .Execute();
        }

        public void ApproveAndShowDown(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            UpdateSqlSection sql = DataAccess.DefaultDB.Update(table);
            if (tran != null)
            {
                sql.SetTransaction(tran);
            }
            sql.AddColumn(table.Status, model.Status)
            .AddColumn(table.ApproveDate, model.ApproveDate)
            .AddColumn(table.Approver, model.Approver)
            .AddColumn(table.ReplaceBy, model.ReplaceBy)
                //Add by sunny 2017 07 20 审批时添加Repeat
            .AddColumn(table.REPEAT, model.Repeat)
            .AddColumn(table.LastUpdateTime, model.LastUpdateTime)
            .AddColumn(table.GK_NO, model.GK_NO)
            .AddColumn(table.Riskrade,model.Riskrade)
            .AddColumn(table.LastUpdateBy, model.LastUpdateBy).Where(table.QualityCode == model.QualityCode)
            .Execute();
        }

        public void UpdateModelTapping(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            UpdateSqlSection sql = DataAccess.DefaultDB.Update(table);
            if (tran != null)
            {
                sql.SetTransaction(tran);
            }
            sql.AddColumn(table.Measurement, model.Measurement)
            .AddColumn(table.YarnLength, model.YarnLength)
            .AddColumn(table.Layout, model.Layout)
            .AddColumn(table.TappingType, model.TappingType)
            .AddColumn(table.LastUpdateTime, model.LastUpdateTime)

            .AddColumn(table.QC_Ref_PPO, model.QC_Ref_PPO)
            .AddColumn(table.HF_Ref_PPO, model.HF_Ref_PPO)
            .AddColumn(table.QC_Ref_GP, model.QC_Ref_GP)
            .AddColumn(table.HF_Ref_GP, model.HF_Ref_GP)
            .AddColumn(table.RF_Remark, model.RF_Remark)
            .AddColumn(table.LastUpdateBy, model.LastUpdateBy).Where(table.QualityCode == model.QualityCode)
            .Execute();
        }
        public void DeleteModel(QcmaininfoModel model, DbTransaction tran)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            DeleteSqlSection sql = DataAccess.DefaultDB.Delete(table);
            if (tran != null)
            {
                sql.SetTransaction(tran);
            }
            sql.Where(table.QualityCode == model.QualityCode)
                .Execute();
        }

        protected bool Exists(QcmaininfoModel model, bool isNew)
        {
            QcmaininfoTable table = new QcmaininfoTable();
            SelectSqlSection sql = DataAccess.DefaultDB.Select(table, QueryColumn.All().Count())
                .Where(table.QualityCode == model.QualityCode
                && table.CreateDate == model.CreateDate
                && table.Creator == model.Creator
                && table.ApproveDate == model.ApproveDate
                && table.Approver == model.Approver
                && table.Status == model.Status
                && table.Sourcing == model.Sourcing
                && table.MaterialGroup == model.MaterialGroup
                && table.AnalysisNo == model.AnalysisNo
                && table.RefQualityCode == model.RefQualityCode
                && table.Pattern == model.Pattern
                && table.DyeMethod == model.DyeMethod
                && table.BfGmmm == model.BfGmmm
                && table.AfGmmm == model.AfGmmm
                && table.Shrinkage == model.Shrinkage
                && table.ShrinkageTestingMethod == model.ShrinkageTestingMethod
                && table.GmtWashing == model.GmtWashing
                && table.Layout == model.Layout
                && table.YarnLength == model.YarnLength
                && table.TappingType == model.TappingType
                && table.Measurement == model.Measurement
                && table.LastUpdateTime == model.LastUpdateTime
                && table.LastUpdateBy == model.LastUpdateBy
                );
            return sql.ToScalar<int>() > 0;
        }

        public void CheckModel(QcmaininfoModel model, bool isNew)
        {
            Validator v = new Validator();
            //Check model's data here.
            if (!v.IsValid)
                throw new ValidationException(v);
        }

        public string GetSameQCRemark(string strQC)
        {
            if (string.IsNullOrEmpty(strQC))
            {
                return string.Empty;
            }
            else
            {
                char[] ch = { ',' };
                string[] qcArray = strQC.Split(ch, StringSplitOptions.RemoveEmptyEntries);
                if (qcArray.Length > 0)
                {
                    QcmaininfoModel qm = new QcmaininfoModel();
                    string fistQC = "";

                    foreach (string qc in qcArray)
                    {
                        qm.QualityCode = qc;
                        QcmaininfoModelList qml = GetModelList(qm);
                        if (qml.Count > 0)
                        {
                            if (qml[0].Status == "Approved")
                            {
                                fistQC = qml[0].QualityCode;
                                break;
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(fistQC))
                    {
                        return "repeat QC#" + qcArray[0];
                    }
                    else
                    {
                        return "repeat QC#" + fistQC;
                    }

                }
                else
                {
                    return string.Empty;
                }
            }
        }



        //Add by sunny 2017 07 20

        public string GetSameApproveQC(string strQC)
        {

            DateTime? EarliestTime = null;
            if (string.IsNullOrEmpty(strQC))
            {
                return string.Empty;
            }
            else
            {
                char[] ch = { ',' };
                string[] qcArray = strQC.Split(ch, StringSplitOptions.RemoveEmptyEntries);
                if (qcArray.Length > 0)
                {
                    QcmaininfoModel qm = new QcmaininfoModel();
                    string fistQC = "";


                    foreach (string qc in qcArray)
                    {
                        qm.QualityCode = qc;
                        QcmaininfoModelList qml = GetModelList(qm);

                        if (qml.Count > 0)
                        {
                            if (qml[0].Status == "Approved")
                            {
                                if (EarliestTime == null)
                                {
                                    EarliestTime = qml[0].ApproveDate;
                                    fistQC = qml[0].QualityCode;
                                }
                                else if (EarliestTime > qml[0].ApproveDate)
                                {
                                    fistQC = qml[0].QualityCode;
                                }
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(fistQC))
                    {
                        return "repeat QC#" + qcArray[0];
                    }
                    else
                    {
                        return "repeat QC#" + fistQC;
                    }

                }
                else
                {
                    return string.Empty;
                }
            }
        }



        /// <summary>
        /// 根据QualityCode查询QC_Ref_PPO信息和HF_Ref_PPO信息
        /// </summary>
        /// <param name="strQC">QualityCode</param>
        /// <returns>QC_Ref_PPO信息和HF_Ref_PPO信息的字符串</returns>
        public string GetRefByQC(string strQC, string strPPONO)
        {

            //20180820 linyob 如果QCMAININFO 中QC_REF_PPO或HF_REF_PPO不为空则取该记录字段否则按原来逻辑取数
            string QC_REF_PPO = "", QC_REF_GP = "", HF_REF_PPO = "", HF_REF_GP = "";
            CustomSqlSection css_MainInfo = DataAccess.DefaultDB.CustomSql(" select QC_REF_PPO,QC_REF_GP,HF_REF_PPO,HF_REF_GP from QCMAININFO where quality_code=@Qc  ");


            css_MainInfo.AddInputParameter("Qc", DbType.String, strQC);


            string rtn = "";
            if (css_MainInfo.ToDataSet().Tables[0].Rows.Count > 0)
            {

                QC_REF_PPO = css_MainInfo.ToDataSet().Tables[0].Rows[0]["QC_REF_PPO"].ToString();
                QC_REF_GP = css_MainInfo.ToDataSet().Tables[0].Rows[0]["QC_REF_GP"].ToString();
                HF_REF_PPO = css_MainInfo.ToDataSet().Tables[0].Rows[0]["HF_REF_PPO"].ToString();
                HF_REF_GP = css_MainInfo.ToDataSet().Tables[0].Rows[0]["HF_REF_GP"].ToString();
            }



            if (strPPONO != "")
            {
                //Sunny 注销2017 0714
                /*CustomSqlSection css = DataAccess.DefaultDB.CustomSql("SELECT (CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.QUALITY_REF_PPO_NO END) AS QUALITY_REF_PPO_NO,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END) AS QUALITY_REF_GARMENT_PART       ,(CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.HANDFEEL_REF_PPO_NO END) AS HANDFEEL_REF_PPO_NO       ,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END) AS HANDFEEL_REF_GARMENT_PART       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END)) AS QUALITY_REF_GARMENT_PART_DESC       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END)) AS HANDFEEL_REF_GARMENT_PART_DESC " +
                                                                   "FROM ppo_hd ph   INNER JOIN ppo_item pi ON ph.ppo_no = pi.ppo_no  INNER JOIN ppo_item_combo pic ON pi.ppo_item_id = pic.ppo_item_id  INNER JOIN fab_combo fc ON pic.fab_combo_id = fc.fab_combo_id  INNER JOIN ppo_qcmaininfo qc ON  qc.ppo_item_id = pi.ppo_item_id  INNER JOIN fab_fabric_type ft ON pi.fabric_type_cd = ft.fabric_type_cd  LEFT JOIN ppo_qccomment qcc  on qc.ppo_qc_id = qcc.ppo_qc_id and  pic.FAB_COMBO_ID =  qcc.FAB_COMBO_ID  LEFT JOIN GEN_CUSTOMER GC ON PH.CUSTOMER_CD=GC.CUSTOMER_CD " +
                                                                   "WHERE ph.ppo_no = @PPO_NO AND pi.quality_code=@Qc AND NVL(IDEN,0)<>0");*/
                //Add by sunny 20170714

                CustomSqlSection css = DataAccess.DefaultDB.CustomSql("SELECT   DISTINCT  ( CASE WHEN qcc.QUALITY_REF_PPO_NO IS NULL  THEN ph.ppo_no  ELSE qcc.QUALITY_REF_PPO_NO END) AS QUALITY_REF_PPO_NO,(CASE WHEN qcc.QUALITY_REF_GARMENT_PART IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END) AS QUALITY_REF_GARMENT_PART       ,(CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.HANDFEEL_REF_PPO_NO END) AS HANDFEEL_REF_PPO_NO       ,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END) AS HANDFEEL_REF_GARMENT_PART       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END)) AS QUALITY_REF_GARMENT_PART_DESC       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END)) AS HANDFEEL_REF_GARMENT_PART_DESC " +
                                                                  "FROM ppo_hd ph   INNER JOIN ppo_item pi ON ph.ppo_no = pi.ppo_no  INNER JOIN ppo_item_combo pic ON pi.ppo_item_id = pic.ppo_item_id  INNER JOIN fab_combo fc ON pic.fab_combo_id = fc.fab_combo_id  INNER JOIN ppo_qcmaininfo qc ON  qc.ppo_item_id = pi.ppo_item_id  INNER JOIN fab_fabric_type ft ON pi.fabric_type_cd = ft.fabric_type_cd  LEFT JOIN ppo_qccomment qcc  on qc.ppo_qc_id = qcc.ppo_qc_id and  pic.FAB_COMBO_ID =  qcc.FAB_COMBO_ID  LEFT JOIN GEN_CUSTOMER GC ON PH.CUSTOMER_CD=GC.CUSTOMER_CD " +
                                                                  "WHERE ph.ppo_no = @PPO_NO AND pi.quality_code=@Qc    and qc.status!='C'  AND NVL(IDEN,0)<>0 ");
                css.AddInputParameter("Qc", DbType.String, strQC);
                css.AddInputParameter("PPO_NO", DbType.String, strPPONO);
                DataTable dt = css.ToDataSet().Tables[0];
                string sd = "";
                if (dt.Rows.Count > 0)
                {

                    sd = css.ToDataSet().Tables[0].Rows[0][0].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][1].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][2].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][3].ToString();
                    if (QC_REF_PPO == "")
                        QC_REF_PPO = css.ToDataSet().Tables[0].Rows[0][0].ToString();
                    if (QC_REF_GP == "")
                        QC_REF_GP = css.ToDataSet().Tables[0].Rows[0][1].ToString();
                    if (HF_REF_PPO == "")
                        HF_REF_PPO = css.ToDataSet().Tables[0].Rows[0][2].ToString();
                    if (HF_REF_GP == "")
                        HF_REF_GP = css.ToDataSet().Tables[0].Rows[0][3].ToString();


                }
                // return (sd);
            }

            else
            {
                //Sunny 注销2017 0714
                /* CustomSqlSection css = DataAccess.DefaultDB.CustomSql("SELECT (CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.QUALITY_REF_PPO_NO END) AS QUALITY_REF_PPO_NO,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END) AS QUALITY_REF_GARMENT_PART       ,(CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.HANDFEEL_REF_PPO_NO END) AS HANDFEEL_REF_PPO_NO       ,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END) AS HANDFEEL_REF_GARMENT_PART       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END)) AS QUALITY_REF_GARMENT_PART_DESC       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END)) AS HANDFEEL_REF_GARMENT_PART_DESC " +
                                                                    "FROM ppo_hd ph   INNER JOIN ppo_item pi ON ph.ppo_no = pi.ppo_no  INNER JOIN ppo_item_combo pic ON pi.ppo_item_id = pic.ppo_item_id  INNER JOIN fab_combo fc ON pic.fab_combo_id = fc.fab_combo_id  INNER JOIN ppo_qcmaininfo qc ON  qc.ppo_item_id = pi.ppo_item_id  INNER JOIN fab_fabric_type ft ON pi.fabric_type_cd = ft.fabric_type_cd  LEFT JOIN ppo_qccomment qcc  on qc.ppo_qc_id = qcc.ppo_qc_id and  pic.FAB_COMBO_ID =  qcc.FAB_COMBO_ID  LEFT JOIN GEN_CUSTOMER GC ON PH.CUSTOMER_CD=GC.CUSTOMER_CD " +
                                                                    "WHERE pi.quality_code=@Qc AND NVL(IDEN,0)<>0");*/
                //Add by Sunny 20170714


                CustomSqlSection css = DataAccess.DefaultDB.CustomSql("SELECT  DISTINCT (CASE WHEN qcc.QUALITY_REF_PPO_NO IS NULL  THEN ph.ppo_no  ELSE qcc.QUALITY_REF_PPO_NO END) AS QUALITY_REF_PPO_NO,(CASE WHEN qcc.QUALITY_REF_GARMENT_PART IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END) AS QUALITY_REF_GARMENT_PART       ,(CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.HANDFEEL_REF_PPO_NO END) AS HANDFEEL_REF_PPO_NO       ,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END) AS HANDFEEL_REF_GARMENT_PART       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END)) AS QUALITY_REF_GARMENT_PART_DESC       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END)) AS HANDFEEL_REF_GARMENT_PART_DESC " +
                                                                "FROM ppo_hd ph   INNER JOIN ppo_item pi ON ph.ppo_no = pi.ppo_no  INNER JOIN ppo_item_combo pic ON pi.ppo_item_id = pic.ppo_item_id  INNER JOIN fab_combo fc ON pic.fab_combo_id = fc.fab_combo_id  INNER JOIN ppo_qcmaininfo qc ON  qc.ppo_item_id = pi.ppo_item_id  INNER JOIN fab_fabric_type ft ON pi.fabric_type_cd = ft.fabric_type_cd  LEFT JOIN ppo_qccomment qcc  on qc.ppo_qc_id = qcc.ppo_qc_id and  pic.FAB_COMBO_ID =  qcc.FAB_COMBO_ID  LEFT JOIN GEN_CUSTOMER GC ON PH.CUSTOMER_CD=GC.CUSTOMER_CD " +
                                                                "WHERE pi.quality_code=@Qc AND qc.status!='C'  AND NVL(IDEN,0)<>0   ");


                css.AddInputParameter("Qc", DbType.String, strQC);

                DataTable dt = css.ToDataSet().Tables[0];



                string sd = "";
                if (dt.Rows.Count > 0)
                {
                    sd = css.ToDataSet().Tables[0].Rows[0][0].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][1].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][2].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][3].ToString();

                    if (QC_REF_PPO == "")
                        QC_REF_PPO = css.ToDataSet().Tables[0].Rows[0][0].ToString();
                    if (QC_REF_GP == "")
                        QC_REF_GP = css.ToDataSet().Tables[0].Rows[0][1].ToString();
                    if (HF_REF_PPO == "")
                        HF_REF_PPO = css.ToDataSet().Tables[0].Rows[0][2].ToString();
                    if (HF_REF_GP == "")
                        HF_REF_GP = css.ToDataSet().Tables[0].Rows[0][3].ToString();
                }







            }


            rtn = QC_REF_PPO + "," + QC_REF_GP + "," + HF_REF_PPO + "," + HF_REF_GP;
            return rtn;



            /*   CustomSqlSection css = DataAccess.DefaultDB.CustomSql("SELECT (CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.QUALITY_REF_PPO_NO END) AS QUALITY_REF_PPO_NO,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END) AS QUALITY_REF_GARMENT_PART       ,(CASE WHEN qcc.iden IS NULL THEN ph.ppo_no ELSE qcc.HANDFEEL_REF_PPO_NO END) AS HANDFEEL_REF_PPO_NO       ,(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END) AS HANDFEEL_REF_GARMENT_PART       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.QUALITY_REF_GARMENT_PART END)) AS QUALITY_REF_GARMENT_PART_DESC       ,(SELECT FABRIC_TYPE_DESC FROM FAB_FABRIC_TYPE WHERE FABRIC_TYPE_CD=(CASE WHEN qcc.iden IS NULL THEN pi.fabric_type_cd ELSE qcc.HANDFEEL_REF_GARMENT_PART END)) AS HANDFEEL_REF_GARMENT_PART_DESC " +
                                                                     "FROM ppo_hd ph   INNER JOIN ppo_item pi ON ph.ppo_no = pi.ppo_no  INNER JOIN ppo_item_combo pic ON pi.ppo_item_id = pic.ppo_item_id  INNER JOIN fab_combo fc ON pic.fab_combo_id = fc.fab_combo_id  INNER JOIN ppo_qcmaininfo qc ON  qc.ppo_item_id = pi.ppo_item_id  INNER JOIN fab_fabric_type ft ON pi.fabric_type_cd = ft.fabric_type_cd  LEFT JOIN ppo_qccomment qcc  on qc.ppo_qc_id = qcc.ppo_qc_id and  pic.FAB_COMBO_ID =  qcc.FAB_COMBO_ID  LEFT JOIN GEN_CUSTOMER GC ON PH.CUSTOMER_CD=GC.CUSTOMER_CD " +
                                                                     "WHERE ph.ppo_no = @PPO_NO AND pi.quality_code=@Qc AND NVL(IDEN,0)<>0");
               css.AddInputParameter("Qc", DbType.String, strQC);
               css.AddInputParameter("PPO_NO", DbType.String, strPPONO);

               // edit by jack 2017-4-21 重写此段代码
               DataTable dt = css.ToDataSet().Tables[0];
               string sd = "";
               if (dt.Rows.Count > 0)
               {
                   sd = css.ToDataSet().Tables[0].Rows[0][0].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][1].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][2].ToString() + "," + css.ToDataSet().Tables[0].Rows[0][3].ToString();
               }
               return (sd);*/
        }




        public string GetShrinkageRisk(string strQC, string Shrinkage, string TestMethod, QcyarndtlModelList yarn, string wash, ref int success)
        {
            try
            {

                StringBuilder values = new StringBuilder();
                int i = 0;
                //因为规则引擎设定为5X5  而用户有的时候复制输入了  5.000000
                Shrinkage = DecimalFractionRemova(Shrinkage);

                CustomSqlSection css_customer = DataAccess.DefaultDB.CustomSql("select customer_cd,name from  gen_customer where customer_cd in (select buyer_id from Qccustomerlibrary where quality_code=@qc) ");

                string customer_Name = "";//国标客户
                css_customer.AddInputParameter("qc", DbType.String, strQC);
                DataSet ds_customer = css_customer.ToDataSet();
                if (ds_customer != null && ds_customer.Tables.Count > 0)
                {
                    DataTable dt_customer = css_customer.ToDataSet().Tables[0];
                    if (dt_customer.Rows.Count > 0)
                        customer_Name = dt_customer.Rows[0]["name"].ToString();
                }





                CustomSqlSection css_finish = DataAccess.DefaultDB.CustomSql("select  a.* from pbKnitFinish a inner join QCFinishDtl b on a.finishing_code=b.finishing_code where b.quality_code=@Qc ");


                css_finish.AddInputParameter("Qc", DbType.String, strQC);

                DataTable dt_finisth = css_finish.ToDataSet().Tables[0];
                string finishStr = "";
                if (dt_finisth != null && dt_finisth.Rows.Count > 0)
                {
                    foreach (DataRow dr in dt_finisth.Rows)
                        finishStr += dr["Description"] == null ? "" : dr["Description"].ToString();
                }


                finishStr = finishStr.ToUpper();



                CustomSqlSection css_construct = DataAccess.DefaultDB.CustomSql("select  distinct b.quality_code,a.Description from pbKnitConstruction a inner join QCConstructionDtl b on a.construction=b.construction where b.quality_code=@Qc ");


                css_construct.AddInputParameter("Qc", DbType.String, strQC);


                string bz = "";
                if (css_construct.ToDataSet() != null && css_construct.ToDataSet().Tables.Count > 0 && css_construct.ToDataSet().Tables[0].Rows.Count > 0)
                {
                    // DataTable dt_construct = css_construct.ToDataSet().Tables[0];
                  
                    foreach (DataRow dr in css_construct.ToDataSet().Tables[0].Rows)
                    {
                        bz += "," + dr["Description"].ToString();
                    }
                    if (bz != "")
                        bz = bz.Substring(1).ToUpper();
                    else
                        bz = bz.ToUpper();
                   
                }

                //QC 限制yarn_count累计为100%
                foreach (QcyarndtlModel model_yarn in yarn)
                {
                    i++;
                    values.Append(i.ToString() + "[>]" + GetYarnCount(model_yarn.YarnCount).ToString() + "[|]" + TestMethod + "[|]" + finishStr + "[|]" + Shrinkage + "[|]" + bz + "[|]" + wash + "[|]" + customer_Name + "[;]");

                }
                if (yarn.Count == 0)
                {
                    i++;
                    values.Append(i.ToString() + "[>]0[|]" + TestMethod + "[|]" + finishStr + "[|]" + Shrinkage + "[|]" + bz + "[|]" + wash + "[|]" + customer_Name + "[;]");
                }
  


          
                CustomSqlSection cuSQL = DataAccess.CreateSqlServerDatabase().CustomSql("EXEC SystemDB.dbo.USP_dtRule_GetBatchRuleValueEX @RuleDefineGuid, @NameList,@CommandList");
                cuSQL.AddInputParameter("RuleDefineGuid", DbType.String, "74fa6fa1_bc17_42c5_90fb_9a2e7548d3dc");
                cuSQL.AddInputParameter("NameList", DbType.String, "Job_ID[>]YARN_COUNT[|]TESTMETHOD[|]FINISHING[|]SHRINKAGE[|]CONSTRUCTION[|]GmtWashing[|]CustomerName");
                cuSQL.AddInputParameter("CommandList", DbType.String, values.ToString());
                DataSet ds = cuSQL.ToDataSet();
                DataTable dt = ds.Tables[0];
                string grade = "";
                List<string> listGrade = new List<string>();
                foreach (DataRow dr in dt.Rows)
                {
                    if (dr[2].ToString() != "")
                    {
                        grade = dr[2].ToString();
                    }

                }
                ////原来还分ABC等级，需要获取最大等级的，后面又不分了全部都是C
                //var nameIndex = 0;
                //for (int j = 0; j < listGrade.Count; j++)
                //{
                //    try
                //    {

                //        char c = Convert.ToChar(listGrade[j]);
                //        char d = Convert.ToChar(listGrade[nameIndex]);
                //        if ((int)c > (int)d)
                //        {
                //            nameIndex = j;
                //        }
                //    }
                //    catch
                //    {


                //    }

                //}

                ////取出长度最大的元素
                //grade = listGrade[nameIndex];
                //if (grade == "@")
                //    grade = "";
                     



                success = 1;
                return grade;
            }
            catch (Exception ex)
            {
                success = 0;
                return "";
            }

        }

        public decimal GetYarnCount(string m)
        {
            try
            {

                m = m.Replace("\t", "").Trim();

                if (m.Contains("D") || m.Contains("F"))
                    return 0;
                m = m.Replace("[S]", "").Replace("[Z]", "");
                Regex numRegex = new Regex(@"^\d+$");

                if (numRegex.IsMatch(m))
                {

                    return Convert.ToDecimal(m);
                }
                else
                {
                    if (m.Contains("|"))
                    {
                        int num = m.IndexOf("|") + 1;
                        decimal begin = Convert.ToDecimal(m.Substring(0, num - 1));
                        decimal end = Convert.ToDecimal(m.Substring(num));
                        return Convert.ToDecimal(((begin + end) / 2).ToString("#0.00"));
                    }

                    if (m.Contains("/"))
                    {
                        int num = m.IndexOf("/") + 1;
                        decimal begin = Convert.ToDecimal(m.Substring(0, num - 1));
                        decimal end = Convert.ToDecimal(m.Substring(num));
                        return Convert.ToDecimal((begin / end).ToString("#0.00"));
                    }

                    return 0;
                }
            }

            catch
            {
                return 0;
            }

        }


        private string DecimalFractionRemova(string data)
        {
            string rtn = "";
            try
            {
                string[] str = data.Split('X');
                foreach (string v in str)
                {
                    if (v == "")
                        continue;
                    char[] ch = v.ToCharArray();
                    string vl = "";
                    int k = -1;
                    for (int j = ch.Length - 1; j >= 0; j--)
                    {
                        if ((ch[j] >= '1' && ch[j] <= '9'))  //||  (cText[i]=='.')
                        {
                            k = j;
                            break;
                        }

                    }
                    if (k > -1)
                    {
                        for (int i = 0; i <= k; i++)
                            vl += ch[i].ToString();
                    }
                    if (rtn == "")
                        rtn += vl;
                    else
                        rtn += "X" + vl;
                }
            }
            catch { }
            //if (rtn != "")
            //    rtn.Substring(1);
            return rtn;

        }

    }
}
